/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import stream from 'node:stream';
import type { StorageEngine } from 'multer';
import type { Request } from 'express';
import { type FfprobeData } from 'media-probe';
import { BinaryToTextEncoding } from 'crypto';
declare global {
    namespace Express {
        namespace Multer {
            interface File {
                hash: string;
                media?: FfprobeData;
            }
        }
    }
}
export declare type Callback = (error: Error | null, path: string) => void;
export declare type MediaStorageCallback = (req: Request, file: Express.Multer.File, callback: Callback) => void;
export declare type MediaStorageDataCallback = (req: Request, file: Express.Multer.File, outStream?: stream.Writable, chunk?: any, encoding?: BufferEncoding) => void;
export interface MediaStorageOptions {
    destination?: MediaStorageCallback;
    algorithm?: string;
    algorithmEncoding?: BinaryToTextEncoding;
    filename?: MediaStorageCallback;
    open?: MediaStorageDataCallback;
    data?: MediaStorageDataCallback;
    finish?: MediaStorageDataCallback;
}
export declare class MediaStorage implements StorageEngine {
    readonly options: MediaStorageOptions;
    readonly getDestination: MediaStorageCallback;
    readonly getFilename: MediaStorageCallback;
    readonly algorithm: string;
    readonly algorithmEncoding: BinaryToTextEncoding;
    constructor(options: MediaStorageOptions);
    getDefaultDestination(req: Request, file: Express.Multer.File, callback: Callback): void;
    getDefaultFilename(req: Request, file: Express.Multer.File, callback: Callback): void;
    _handleFile(req: Request, file: Express.Multer.File, callback: (error?: any, info?: Partial<Express.Multer.File>) => void): void;
    _removeFile(req: Request, file: Express.Multer.File, callback: (err: NodeJS.ErrnoException | null) => void): void;
}
declare const _default: (options: MediaStorageOptions) => MediaStorage;
export default _default;
