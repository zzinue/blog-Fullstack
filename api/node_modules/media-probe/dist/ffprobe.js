"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ffprobe = void 0;
const child_process_1 = require("child_process");
const getArgs = (inputPath, opts) => {
    const args = [];
    if (opts.showStreams !== false) {
        args.push("-show_streams");
    }
    if (opts.showFormat !== false) {
        args.push("-show_format");
    }
    if (opts.showFrames === true) {
        args.push("-show_frames");
    }
    if (opts.showPackets === true) {
        args.push("-show_packets");
    }
    if (opts.showPrograms === true) {
        args.push("-show_programs");
    }
    if (opts.countFrames === true) {
        args.push("-count_frames");
    }
    if (opts.countPackets === true) {
        args.push("-count_packets");
    }
    if (opts.selectIndex !== undefined || opts.selectType !== undefined) {
        const filter = [];
        if (opts.selectType !== undefined) {
            filter.push(opts.selectType == "audio" ? "a" : "v");
        }
        if (opts.selectIndex !== undefined) {
            filter.push(opts.selectIndex.toString());
        }
        args.push("-select_streams", filter.join(":"));
    }
    args.push("-v", "quiet", "-print_format", "json", inputPath);
    return args;
};
const ffprobe = (input, opts) => {
    const ffprobePath = (opts === null || opts === void 0 ? void 0 : opts.path) || process.env.FFPROBE_PATH || "ffprobe";
    return new Promise((resolve, reject) => {
        child_process_1.execFile(ffprobePath, getArgs(input, opts || {}), (err, stdout, stderr) => {
            if (err) {
                return reject(err);
            }
            if (stderr) {
                return reject(stderr);
            }
            resolve(JSON.parse(stdout));
        });
    });
};
exports.ffprobe = ffprobe;
//# sourceMappingURL=ffprobe.js.map